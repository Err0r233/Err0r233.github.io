[{"title":"Buuoj Hack World 题解","date":"2022-11-09T05:08:46.000Z","url":"/2022/11/09/Buuoj-Hack-World-%E9%A2%98%E8%A7%A3/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"续接上文 打开靶机同样是sql注入，题面已经提示我们flag在flag表的flag列里了 接下来我们只需要查询就好了 检测注入方式输入1’ 回显bool(false) 没有报错信息 使用堆叠注入和联合查询 均回显SQL Injection Checked. 那只能考虑盲注，测试下是否有两种回显方式 使用1^1 和1^0 测试 发现1^1时，回显Error 发现1^0时，回显Hello, glzjin wants a girlfriend. 说明可以使用盲注 直接跑脚本就行了 把昨天的脚本复制一下，post传参名称改为id就好了（题目提示要我们提供id） Payload 但是这里跑是跑不出结果的 问题分析测试语句 1^(ascii(substr((select(group_concat(flag))from(flag)),1,1))&lt;104) (因为flag的第一个字母f的ascii是102) 发现SQL Injection Checked 所以说某些词被检测到了 经测试.. 当输入select(group_concat(flag))时，检测到了SQL注入 修改Payload对于单个词汇，可以去掉group_concat 所以脚本payload改为 1^(ascii(substr((select(flag)from(flag)),%d,1))&lt;%d)%(i,mid) 成功拿到flag PS：不要直接copy我的flag，这个题是动态flag"},{"title":"NewStarCTF SQL注入题","date":"2022-11-08T07:24:09.000Z","url":"/2022/11/08/NewStarCTF-SQL%E6%B3%A8%E5%85%A5%E9%A2%98/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"摆烂大师的第一篇Web文章，qwq。检验我摆烂的水平的时间到了 写写NewStarCTF的SQL注入题吧… 五周考了五个注入，考的点都不一样 NewStarCTF Week 1： Word - For - You嗯… 这个题其实并不算sql注入，只是让你熟悉SQL的语句罢了 打开靶机查询语句发现，输入1和输入1’的回显是一致的，根据这个信息能够初步得出考的应该不是SQL注入 SQL万能密码一般查询数据库执行的语句时 select user_id,user_type,email from users where user_id=&#39;用户名&#39; and password=&#39;密码&#39; 由于后台进行数据库查询时没有滤过单引号，当输入admin 和 1’ or’1’&#x3D;’1时，执行的语句为： select user_id,user_type,email from users where user_id=&#39;admin&#39; and password=&#39;1&#39; or&#39;1&#39;=&#39;1&#39; 这样子看的话，SQL查询语句被分成了两段： 第一段：select user_id,user_type,email from users where user_id=&#39;admin&#39; and password=&#39;1&#39; （由于sql语句中逻辑优先度 【&#x3D;】&gt;【and】&gt;【or】） 第二段：&#39;1&#39;=&#39;1&#39; 这两段语句之间的逻辑运算符是or 由于1&#x3D;1恒为真，所以这段SQL语句恒为真，认证成功 payload使用SQL注入万能密码查询 1&#39; or&#39;1&#39;=&#39;1 拿到flag NewStarCTF Week 2： Word - For - You (2 Gen)报错注入 &#x2F; sqlmap一把梭 打开靶机输入1’ 发现报错，存在SQL注入 测试联合注入测试字段输入1&#39; order by 3# 报错 而输入1&#39; order by 2# 回显正常，说明字段数为2 测试回显位输入1&#39; union select 1,2# 只显示查询成功，说明没有回显位 无法使用联合注入查询 使用报错注入报错注入适用条件：页面没有回显位，但是页面会有报错信息，例如输入 1&#39; order by 3#的时候 注入语句：updatexml(1,&#39;~&#39;,3)，当第二个语句包含特殊字符时，数据库会报错，并且会把参数的内容显示在报错中 需要使用concat语句拼接字符串，长串的语句使用group_concat 查询命令： 1&#39; and updatexml(1,concat(&#39;~&#39;,database()),3)# –爆库 爆出库名wfy 1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name) from inforamtion_schema.tables where table_schema=database())),3)# –爆表 1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name) from information_schema.columns where table_name=&#39;wfy_comments&#39;)),3)# –爆列名 爆出的列名为id,text,user,name,display 我们只需要查询text的内容即可 payload1&#39; and updatexml(1,concat(&#39;~&#39;,(select(reverse(group_concat(text))) from wfy_comments)),3)# 要点： 报错注入的查询内容的字符是有限制的，如果内容过多，则无法回显。所以我们这里使用reverse()将flag倒着输出 使用select之前都需要在select前加括号 拿到倒置的flag sqlmap一把梭sqlmap的使用教程可以查看这篇博客文章 &lt;[(9条消息) 工具使用]SqlMap_拈花倾城的博客-CSDN博客_sqlmap联动msf&#x2F;&gt; 我们可以使用burp抓包的方式，抓到包的数据存入txt文本内，并使用sqlmap梭哈 将抓包的数据保存至txt文本内 sqlmap -r 1.txt --dbs sqlmap -r 1.txt -D wfy --dump 爆库内容 NewStarCTF Week 3： multiSQL堆叠注入，sql预处理语句 题目描述：需要我们修改火华老师的成绩，让他通过四级考试 测试联合注入 &#x2F; 报错注入输入1&#39; 1均无回显 输入1&#39; union select 1,2,3,4# 发现被过滤 联合注入失败 由于无报错信息，无法使用报错注入 堆叠注入堆叠注入是将多个sql语句一起执行，使用;间隔的注入方式 输入1&#39;;show databases;# 爆库 输入1&#39;;show tables;# 爆表 输入1&#39;;show columns from score;# 爆列名 修改数据使用update语句修改分数即可 updatescore set listen=9999 where username=&quot;火华&quot; 发现被过滤，怀疑过滤update 所以这里需要我们使用sql预处理语句进行拼接，绕过update的过滤 1&#39;;set @sql=concat(&#39;u&#39;,&#39;pdate score set listen=99999 where username=&quot;火华&quot;&#39;);prepare sql_exe from @sql;execute sql_exe;# 设置sql语句&#x3D;拼接u 和后面的语句 预处理sql_exe 执行sql_exe 点击验证成绩即可，然后就能拿到flag 或者 1&#39;; handler scoreopen asa; handler a read next;# 查看分数 点击验证成绩就能获得flag 彩蛋这里如果修改的分数不一样的话，拿到flag的对话也是不一样的 修改成100分的结果如下 修改成99999分的结果如下 所以这个故事告诉我们不要把分数改的太大（雾） NewStarCTF Week 4： 又一个SQL异或&#x2F;布尔盲注 打开靶机尝试性输入1 和 1’ 果然，寄。没有回显位，没有报错信息。 我们常用的三种注入方式已经无效了，所以我们接下来要考虑盲注 由于输入1 和 1’的回显信息是好耶和啊哦（刚好是两种不同的信息） 我们这里输入0试试 发现输入0和输入1是两种不同的回显，这样我们就可以使用盲注了 异或运算异或的运算有： 1 ^ 1 &#x3D; 0 1 ^ 0 &#x3D; 1 0 ^ 0 &#x3D; 0 0 ^ 1 &#x3D; 1 也就是说，两件事的异或运算中，如果有一真一假，就会输出1 如果两件都是真，则输出0 那么我们就可以通过异或运算构造sql语句查询 1^(length(database())=3) 注：如果过滤空格，则需要通过加括号的方式进行绕过，此题过滤了空格，所以要在length前加括号 如果数据库的名称长度为3，则为真 1^1 &#x3D; 0，传的数据为0，回显为啊哦 如果数据库的名称长度不为3，则传的数据为1，回显为好耶 通过不断更改&#x3D;后面的数字，可以得出数据库的长度 发现&#x3D;3时，返回啊哦，则说明数据库长度为3，并且布尔&#x2F;异或盲注可用~ 接下来就是编写脚本的事情了 编写盲注脚本采用二分法方式编写盲注脚本 啥是二分法方式？emmm，盲注的原理是一个字符的ascii码数值与你的数值作比较，需要一个个进行比较输出 比如爆库的一个查询语句是1^(ascii(substr(database(),1,1))&#x3D;100) 即数据库名称的第一个字符的ascii 与 100 比较，如果是100 即提交0，返回的值是啊哦 而二分法能够缩短这个过程（ 首先，从数组的中间元素开始搜索，如果该元素正好是目标元素，则搜索过程结束，否则执行下一步。 如果目标元素大于&#x2F;小于中间元素，则在数组大于&#x2F;小于中间元素的那一半区域查找，然后重复步骤（1）的操作。 如果某一步数组为空，则表示找不到目标元素。 大致意思是取第一个字符的ascii值和ascii（32，128）中间值，也就是80（刚好是常用的字段）作比较，如果ascii值大于中间值，从（80,132）的中间值比较,重复比较 直至ascii值相等。 结束一个判断的依据根据页面返回的信息不同，在我的情况中，如果返回的是啊哦，说明是1^1型，那么，啊哦就是正确的依据 Python编写这里给出post &#x2F; get请求的两种盲注的脚本（ 其实你只要跑一次就知道为什么要-1了 最后一次输出的值是&lt;120，返回为真，但是我们此时的mid是120，真正的值是&lt;120 get传参也是如此 这里给出buuoj.cn FinalSQL的盲注脚本 我们愉快的跑脚本就完事了 NewStarCTF Week 5： Final Round延时盲注 题面提示：啊呜，好困呜呜（sleep） 进入靶机其实已经不用测什么方式注入了，sleep嘛，延时注入 测试语句： 114514||if(length(database())=3,sleep(0.2),1) 如果数据库名长度为3，休眠两秒再访问（ 肉眼可见的延迟 编写脚本同样使用python脚本，同样也是post请求，同样也是二分法 套异或的就行了，只不过判断的方式有些不同 bool&#x2F;异或 是根据1和0的两种回应来判断的，而time是根据访问的时间来进行访问的 然后就等吧… 啊呜，好困呜呜 睡一觉就把表跑完了，放心吧 记得renew 靶机 睡了一觉，终于跑完了（我忘记开最后那个倒序重整了，所以flag是倒着的） flag{Ju2t_let_me_sleep_f0r_a_while} 结束辣，好题，但是结束了才会做呜呜呜 看我摆烂的结果如何？ 题目来自：buuoj.cn &#x2F;&#x2F;NewStarsCTF 图片来自：截图 侵删qwq"},{"title":"About Me","date":"2022-11-07T14:27:49.000Z","url":"/2022/11/07/Test/","tags":[["Introduce_Myself","/tags/Introduce-Myself/"]],"categories":[["Intro","/categories/Intro/"]],"content":"Err0r233的自我介绍qwq 一个普通的摆烂哥，普通到不能再普通 qwq，梦想是做到一份非常简单的高考数学卷 不开玩笑了，真正的梦想是变得有钱qwq 练习时长两分钟的个人练习生，甚至不能说是练过ctf的呜呜 啥也不会，留着摆烂 哈？没有摆烂的人生哪能叫做好人生啊 博客的内容 偶尔写写题解qwq(x) 摆烂的时候写写东西用的 Thai神的任务罢了 以上三点都是错的 所以我要到什么时候才能有钱啊啊啊啊啊啊啊 Friends提供一下链接和头像就好了（雾） 图片来自：网络&#x2F;鹰角网络叙拉古人cg 侵删qwq"}]