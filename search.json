[{"title":"看看sql注入","date":"2023-01-10T02:35:56.000Z","url":"/2023/01/10/%E7%9C%8B%E7%9C%8Bsql%E6%B3%A8%E5%85%A5/","tags":[["SQL_Injection","/tags/SQL-Injection/"]],"categories":[["CTF Web","/categories/CTF-Web/"]],"content":"突然发现好久没写博客了，赶紧水一篇（雾） 该文稍微总结一下我遇到过的sql注入（非常基础非常萌新，没学过的都能看得懂……吗？） 0x01 SQL漏洞成因程序没有对用户的输入进行过滤。 例如SQL的查询语句可能是： id和password是我们可输入的参数 在进行数据库查询时由于没有过滤单引号，我们输入1’和任意的密码时，语句会变成： 由于sql语法中单引号必须成对存在，所以这条查询语句中1’后面的单引号会和前面的单引号闭合，导致后面的单引号变得多余了，这条语句就会报错，一般报错的内容就是： 此时我们只需要将前面的单引号闭合，在后面插入我们想要查询的语句，就能够进行SQL的注入了 0x02 SQL注入点SQL注入的注入点其实很多的（ 首先看url 是否有?id&#x3D;1这种，如果有的话有可能是SQL注入 然后就是给你一个框框，有可能是搜索用户名，也有可能是登录框，让你输入账号密码登录，也有可能是让你查询一段内容… 然后就是http头，包括user-agent，cookie，referer，xff(有些flask的也经常用X-Forwarded-For) 只需要在你怀疑的注入点加入单引号进行测试即可（雾 其实有可能有单引号、双引号、甚至加入一个反斜杠也有可能发现 0x03 查询语句的过滤1.大小写绕过： 2.编码：进行url编码，如and（&amp;&amp;）可以尝试使用%26%26 如#可以使用%23 3.内联注释：空格被过滤的一个方法： 另一个方法就是使用括号： 4.双写绕过： 将中间的union和select删除后又有union select，绕过成功 大抵是因为str_replace? 5.符号绕过：or 换成 || and 换成 &amp;&amp; 6.大小于号的过滤万恶的大小于号过滤，在写脚本跑的时候非常痛苦 可以使用greatest()函数、least()函数 其实也可以直接使用等于号硬跑脚本，也就只用跑十七八分钟而已 0x04 SQL注入类型分为字符型和数字型两种 判断方式也很简单： 虽然但是我这一步好像从来没判断过，直接加个单引号注入的… 所以有些不用加单引号的题就比较容易吃亏 0x05 SQL注入手法1.联合查询非常常用的注入，适用于有回显位的注入（也就是会返回我们输入数据结果的位置） 首先判断字段数： 然后判断回显位： 爆库：（推荐使用-1） 爆表： 爆列名： 爆内容： 当然也可以写成： 2.报错注入报错注入适用于没有回显位的，但是页面有报错信息的时候 有三种注入方式（雾） 1.group by 重复键冲 反正我是看不懂： 2.extractvalue() 3.updatexml() 与extractvalue()很相似，也是这三个里面最常用的： 注意报错注入只能回显前32个字符，爆flag时可能需要添加reverse函数： 3.堆叠注入在SQL中（以及在很多的地方中），分号表示命令的分隔，也就是SQL语句的结束，如果使用;后再在后面构造SQL语句，两条是可以一起执行的,例如： （此处可左转NewStarCTF week 3的multi SQL） 将id为1的密码更新为123456 爆库： 爆表： 爆列： 查看内容： 如果update等被过滤，可以使用sql预处理语句进行拼接： 4.布尔盲注适用于页面只有两种回显结果，没有任何错误回显 有的时候也可以使用异或符号（页面有1和0的时候） 直接用脚本跑就行了 5.时间盲注延时注入，页面啥回显都没有的时候，我们需要观察页面的请求时间（ 编写脚本： 根据注入类型的不同，前面的查询需要修改的（ 6.headers注入就是利用上面的方式，换了个注入点… 例如user-agents（sqli-labs的less-18） cookies referer X-Forwarded-For 7.宽字节注入：宽字节是多个字节宽度（&gt;1）的编码（GBK,gb2312……） 汉字就是宽字节编码 有些时候传入的参数（单引号）会被addslashes()函数转义，添加反斜杠，但是又因为设定字符集为gbk，导致宽字节的注入 要将反斜杠转义处理掉的方式有： 让（\\）失去作用 让（\\）的编码和另一个编码组合成两字节的编码（使得反斜杠消失） 第二种方法就是宽字节注入： 单引号的编码是%27 反斜杠的编码是%5c 所以我们只需要在单引号前加上%df，此时转义后的反斜杠(%5c)与%df就会组成一个汉字：運(运的繁体,%df%5c) 也就是： 这个时候查询语句就会变成： 剩下的只需要和联合查询一样的地方即可，在前面的单引号添加%df 在爆列名时： 8.二次注入第一次注册等操作没有注入点，但是第二次操作代入了第一次操作的语句，导致sql注入（ 也就是说，我们提前构造好的语句成功储存进入数据库了，然后第二次操作（例如修改密码）中调用了第一次操作的语句，使得sql语句被执行 … 感觉好像还是没解释好，就是 第一次操作中，我们成功将sql语句储存入数据库中了 第二次操作中，数据库调用了该sql语句，导致sql语句被执行，形成二次注入(?) [RCTF2015] EasySQL例如该题就是二次注入： 需要我们注册一个账户： 尝试注册一个叫1’的账户，注册成功，此处没有注入点 发现能修改密码，这种先注册再修改密码的操作很可能有二次注入 发现同样没有任何问题… 可能是单引号的问题，尝试换成双引号再注册一个用户 然后修改密码，发现报错： 说明是双引号型的二次注入，并且有报错，可以使用报错注入： 回显 invalid string，说明有过滤 可能是过滤了空格，所以我们使用括号替代空格： 发现还是回显invalid string 所以有可能也过滤了and，使用&amp;&amp;替代空格： 注册成功，然后修改密码 爆出库名web_sqli 注册用户 然后修改密码，爆出表名：article flag users 注册用户 然后修改密码，爆列名 注册用户 爆flag 发现flag并不在flag表内，回去看users表： 发现real_flag_1s_her 然后尝试 然后报错了… 没有这一列 突然才意识到报错注入有32个字符长度的限制， 尝试倒序查看列名： 果然，列名是real_flag_1s_here 然后爆flag： 发现很多xxx，列名内有很多xxx，占用了32个字符长度 regexp函数：正则匹配，返回特定字符串 flag的格式就是flag{xxx} 所以只需要匹配含有f的字符串即可 组合一下就行了，注意重复的地方 9.无列名注入适用于information_schema表被过滤的情况 爆库名： 使用mysql.innodb_table_stats时，不储存列名 爆表名： 对列的处理： 先判断该表内有几列 然后给列都取一个名，然后读取这个名字的内容 判断列数： database.table为数据库名.表名 回显了多少个1就说明有几列 例如： 给列取名字读取： 10.insert注入SQL语句： 此时构造语句 语句就会变成： xxxxx可以是报错注入的updatexml，也可以是时间盲注的语句，取决于你用何种注入方式： 0x06 结束嗯，凑数标题（ 老采集了我 参考资料： sql注入详解 [RCTF2015]EasySQL 1 "},{"title":"NepNep x CatCTF    WriteUp","date":"2023-01-02T03:07:03.000Z","url":"/2023/01/02/NepNep-x-CatCTF-WriteUp/","tags":[["Web","/tags/Web/"]],"categories":[["CTF WriteUp","/categories/CTF-WriteUp/"]],"content":"又是被虐爆的一天，太难了 MiscMeowMeow将图片拖入WinHex，会发现在文件的后半部分藏有flag Nepnep 祝你新年快乐啦评论区置顶评论： CatchCatGPS Visualizer: Draw a map from a GPS data file 通过这个绘制出猫猫的行动路径，即可获取flag （为什么这玩意这么难看，这两个题都是考眼力的） CryptoCat’s gift将礼物分成了四份，说明结果需要乘4，其中一份是1-1&#x2F;3+1&#x2F;5-1&#x2F;7+…. 这个级数其实就是 （大抵是这样） 所以最后的值就是π（所以直接交pi是错的 看到flag的格式都是食物，所以应该是派 Webez_js直接进入**&#x2F;js&#x2F;game.js** 看到下面的函数： 访问&#x2F;g3t_fl4g即可 ezbypass华夏ERP漏洞之授权绕过漏洞+后台命令执行漏洞&#x3D;未授权命令执行 | CN-SEC 中文网 参考这篇文章，可以绕过验证漏洞直接访问flag.html payload: &#x2F;a.css&#x2F;..&#x2F;flag.html 或者**&#x2F;login.html&#x2F;..&#x2F;flag.html** Catcat蓝帽杯 2022 web&#x2F;misc writeup - 腾讯云开发者社区-腾讯云 (tencent.com) 进入靶机，点击猫猫 可以看到url的变化，推测有目录穿越 尝试 成功，所以通过 查看当前进程，回显app.py 通过 获取到源码： 可以看到是flask（ 在&#x2F;admin路由内，如果session的admin&#x3D;1的话就会回显flag 而通过burp抓包访问&#x2F;admin会回显set cookie: session… 所以应该是需要我们伪造一个session并且将设置的session修改掉 伪造session需要知道SECRET_KEY 这个思路在文章中有提及： 通过/proc/self/maps读取堆栈分布，然后通过/proc/self/mem读取内存分布，获取secretkey 这里使用thai大师傅的dump.py 先通过?file=../../../../../../../../proc/self/maps获取堆栈分布，将其内容复制并保存至source.txt 然后使用dump.py获取secretkey： 获取到secretkey后使用flask-session-cookie-manager即可 最后修改cookie即可 "},{"title":"Buuoj SSRF Me 题解","date":"2022-12-28T03:40:42.000Z","url":"/2022/12/28/Buuoj-SSRF-Me-%E9%A2%98%E8%A7%A3/","tags":[["Web","/tags/Web/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"昨天做到的一个很好的题目（个人觉得），写出来给大家看看（ 打开靶机打开靶机，直接看到源码，并且能够看到提示，flag在flag.txt内： 但是这源码也太恶心人了吧，这谁看得懂啊… 然后经过我不懈的努力（雾 把源码整理好了： 审代码接下来慢慢对代码进行审计即可： 获取flag整理一下大概就是如下的思路： 通过exec函数读取flag.txt的内容，而flag.txt的内容会被scan的action存储在result.txt中 我们只需要获得read方法读取即可： sign，action在&#x2F;De1ta路由中由cookie传入，而param由get方法传入 所以我们需要先访问&#x2F;geneSign路由，然后param&#x3D;flag.txtread 返回一个值：(055967a25e4ba3f082a3ab94e0344994) 注：这个值随每次靶机打开都是不一样的 这个值就是flag.txtreadscan的sign值： 而我们传入的参数param，action又是flag.txt、readscan，完美符合sign值 然后使用bp抓包，添加cookie，修改url即可： 结束~ 另解：哈希长度拓展攻击虽然但是我并不知道这个怎么用，在这里贴出大佬的wp吧（ De1CTF ssrf_me 的三种解法 - 先知社区 (aliyun.com) 略略水一篇博客没人骂我的吧~"},{"title":"Buuoj题目(3)","date":"2022-12-24T03:28:18.000Z","url":"/2022/12/24/Buuoj%E9%A2%98%E7%9B%AE-3/","tags":[["Web","/tags/Web/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"做做buuoj上的web题，本萌新纯采集，轻喷（（（ 没想到这个连续剧居然做到第三集了（？ [GWCTF 2019] 我有一个数据库打开靶机，一眼乱码… 使用charset改编码： 好，那就用dirsearch开找，由于万恶的反爬，还是只能用低线程： 跑出了phpmyadmin和robots.txt 访问robots.txt 发现提示是phpinfo.php 所以直接选择看&#x2F;phpmyadmin&#x2F; 发现是phpmyadmin 4.8.1的版本 然后就上万能的CSDN… 发现有本地包含漏洞 直接拿漏洞打就完事了： payload： [BJDCTF2020] Mark loves cat变量覆盖题。 进入靶机，就是一个贼酷炫的前端页面（ 然后啥也点不了 这个时候就要考虑是不是有dirsearch可以扫出来的东西了 使用dirsearch 能够扫描出&#x2F;.git&#x2F; 使用githack下载源码： 所以思路很清晰，只需要将上面那三个变量选一个覆盖成$flag，然后再满足你所选择变量的exit条件即可 (虽然但是我到现在都不知道handsome要怎么做，怎么让flag&#x3D;一个变量，这个变量又不能等于flag啊) 方法一： 如果选择yds： 首先将yds覆盖成flag： 然后… 如果GET传入flag和POST传入的flag都是空的话，就exit了 所以直接结束 方法二： 如果选择is： 还是先将is覆盖成flag： 看条件，如果get或者post传入flag的值为flag时，exit 所以后面传入flag&#x3D;flag即可 [安洵杯 2019] easy_web打开一看，也是啥都没有。。。 不过首页那个img&#x3D;比较奇怪，看起来像base64加密 把他拖入CyberChef，发现其经过了1次Hex加密和2次base64加密 最初的结果是555.png 大抵就是那张图片？ 利用这个原理，我们将555.png改为index.php，然后进行同样的加密，尝试获取源码： 这里最大的问题就是如何使得一个字符串a的值不等于b，md5的值又要强相等（如果是两个等号，可以使用0e开头的md5） 使用 fastcoll 快速MD5碰撞生成器： 可以构建两个md5值一样，但是内容完全不一样的字符串 使用方法如下： 创建一个文本文件，写入内容，命名 cmd运行： fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt（其中init是你创建的文本文件，1.txt和2.txt是生成的两个文本的txt文件） 然后需要进行一步url编码才能够正常使用： result： 由于字符串比较长，所以使用burp进行Post传参：对于过滤，使用反斜杠绕过，空格使用%20进行url编码（burp里面打那个空格直接bad request了）： 找到flag 直接cat &#x2F;flag "},{"title":"Dandelin双球模型","date":"2022-12-19T09:37:02.000Z","url":"/2022/12/19/Dandelin%E5%8F%8C%E7%90%83%E6%A8%A1%E5%9E%8B/","tags":[["不务正业","/tags/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A/"]],"categories":[["不务正业系列","/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"]],"content":"最近有个小朋友问我Dandelin用来证明一个平面截圆锥得到的截口曲线是椭圆的模型的题咋做的，我一看，我大意了，不会做…… 所以直接去网上百度一下，水了一篇博客出来 0x01 Dandelin模型你是否在寻找Dandelion() Germinal Dandelin，著名数学家，主要成就有Dandelin双球模型，在圆锥与圆的切线等研究上取得了巨大的成果。其Dandelin的双球模型便是在一个圆锥内塞入两个球，这两个球既与圆锥相内切，又与一个公共平面相切，这个公共平面截圆锥所得到的截口曲线便是圆锥曲线（可以是椭圆、双曲线和抛物线） 0x02 Dandelin双球模型的证明根据圆锥曲线的第一定义即可证明： 如果平面内一动点与两定点F1、F2的距离之和等于一个常数的轨迹为椭圆 那么我们就有如下的证明过程，假设上面的小圆圆心为O1、大圆圆心为O2，内切球与圆锥的交点为B、C： 所以截口曲线便是椭圆 0x03 截口曲线离心率的计算离心率计算公式： 那么我们根据几何关系计算出c和a即可 为方便计算取其截面图如上，并且添加辅助线后的图如下（辅助线是手动添加的，可能十分不平整）： 假设D、E是切点，连接O1F1、O2F2、O1D、O2E 又作O1G垂直于O2E，垂足为G（O1、F1、G三点并不共线） 同时设轴线C1C2与平面α的交点为H 夹角为β、与母线的夹角为γ 由上面的推导可得到： 容易证明得到： 就能够将DE转到O1G 接下来提供两种方法（其实二者是一致，实际上只有一种的）： （假设圆的半径，O1O2的距离已知） 法一： 其实细细看来可以进行如下的推导： 这也就是方法二，计算这两个夹角的余弦值即可 其实这两个方法确实是一样的（雾 当然，如果选取的夹角不一样，得到的结论也会略有不同，但是离心率的值仍然是两个角度的比值： 参考了闲敲棋子落灯hua师傅的文章 0x04 小拓展由该双球模型得出的离心率的取值是由截面与底面的夹角α决定的（一般认为圆锥固定不变） 所以截取的角度不同，所得到的圆锥曲线也不同（根据离心率判断即可） 在某些动点类求轨迹的问题中，也可以通过截面与底面的夹角α，母线与底面的夹角β来确定离心率，从而确定轨迹是何种圆锥曲线 更多的题型可以去参考棋子落灯hua师傅的文章，由于本人能力有限，这里就不作展开 其实真的是因为我又菜又懒，然后啥也不会... 参考文章： 【解题研究】对于圆锥截口曲线性状的Dandelin双球证明 "},{"title":"Buuoj题目(2)","date":"2022-12-15T06:43:46.000Z","url":"/2022/12/15/Buuoj%E9%A2%98%E7%9B%AE-2/","tags":[["Web","/tags/Web/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"做做buuoj上的web题，本萌新纯采集，轻喷（（（ [GXYCTF 2019] 禁止套娃打开靶机，页面直接显示 “flag在哪里呢？” 所以我们使用dirsearch扫描试试，看看是否有敏感文件 不得不说buu的反爬是真的恶心…扫快一点就会弹429 发现&#x2F;.git&#x2F;能正常访问 使用githack下载源码，源码如下： 一眼顶针，鉴定为无参数RCE（经典括号嵌套） 这个过滤的挺少，直接祭出payload薄纱： （雾） 好了不闹了，先用： 看flag的位置： 发现在倒数第二，使用array_reverse逆转到第二位，刚好能够使用next函数读取数组的第二位 使用show_source读取php文件即可 [BSidesCF 2020] Had a bad day打开靶机，发现很多猫图和狗子的图片（雾，重点不是这个） 看看上面的url，发现category&#x3D; 这引诱人上去加单引号啊（（（ 试试加个单引号 发现报错了，但是报错的不是sql（ 发现了include报错，尝试能不能打开index.php获取源码： 成功读取base64，进行一个解码： 以下是解码的内容： 重点就是传参的内容需要含有woofers或者meowers或者index，才能进行文件的包含，那这个就很简单了，直接加一个woofers&#x2F;meowers&#x2F;index到base64-encode后面去即可，payload如下： 获得base64，解码获得flag： [NCTF 2019] Fake XML cookbook又是我不会的新知识呢 XXE（XML External Entity Injection） 打开靶机，又是登录。。。 尝试弱口令和SQL注入，肯定是不行的 然后使用Burp抓包，发现了一段： 加载了来自外部的实体，导致了可以加载外部文件，可以进行文件的读取 以及加上题目的提示 XML，应该可以执行XXE 一个经典的XXE组成如下（DTD外部实体声明） 所以直接通过burp抓包，然后使用XXE攻击即可 成功获得flag "},{"title":"Buuoj题目(1)","date":"2022-12-09T02:44:14.000Z","url":"/2022/12/09/Buuoj%E9%A2%98%E7%9B%AE-1/","tags":[["Web","/tags/Web/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"做做buuoj上的web题，本萌新纯采集，轻喷（（（ [网鼎杯 2018] FakebookSQL注入兼反序列化 点开靶机，一眼醒目的login和join，尝试login，那肯定是失败的 所以我们试试注册，填好个人信息之后点击提交，但是提示Blog is not valid. 所以应该是博客地址的问题，应该是要一个确切的博客地址 所以这里把博客的地址都填上（只用填github.io的就可以了） 然后观察url发现no&#x3D;1 于是尝试no&#x3D;1’ 发现SQL报错了 于是进行SQL注入 回显 no hack _，说明过滤了关键词 接下来就是测试关键词的时候 发现union 无no hack回显 union select 有no hack 回显 应该是过滤了空格 所以使用 发现报错，去掉单引号 发现2号位回显正常 然后上方有个notice: unserialize() 说明有反序列化的存在 爆出库名 fakebook 爆出表名 users 爆出列名 no username passwd data 发现了一串序列化的结果 然后似乎就做不下去了。。。 应该还有一些隐藏的文件吧，打开F12也没有提示 所以应该是存在敏感文件 打开dirsearch扫一下…. 不过由于buuoj有反爬这个特性在，所以很难受的就是需要加上delay，使得扫描的过程十分的慢…… 推荐盲试 robots.txt www.zip .bak啥的 在robots.txt发现： 直接访问&#x2F;user.php.bak获得源码 所以我们只需要序列化用file协议写出的flag位置，读入后使用curl就能够返回flag的内容了 flag应该在根目录，那么序列化如下： 所以使用sql的语句写入内容： 如果没有内容，打开F12试试，如果也没有的话就换位置 测试3、4号位： 发现4号位回显正常，打开F12即可获取flag [BJDCTF2020] The mystery of ipsmarty 模板注入 打开靶机 点击Flag，发现显示的是你的IP 点击Hint，发现提示： 修改ip的话，应该是X-Forward-For的问题，所以我们使用burp抓包进行测试 修改X-Forward-For为127.0.0.1，显示为127.0.0.1 试试修改为{7*7}，发现显示为49 应该就是ssti模板注入了，然后祭出经典老图 其实也可以通过 查看哪个模板 所以是smarty的ssti注入 smarty的模板注入直接使用系统命令即可： 获得flag [BJDCTF2020]ZJCTF，不过如此[ZJCTF2019]NiZhuanSiWei的复刻了属于是（雾） 直接看代码： 同样的写入，文件包含以及一个next.php 那我们直接data协议写入，php:&#x2F;&#x2F;filter文件包含即可 获得next.php内的base64代码，进行一个decode 经典再现： 指路Day 4: Baby match（每日一题） preg_replace &#x2F;e能够执行strolower(“\\\\1”)的内容 preg_replace输入的第一个是正则表达式$re，然后将$str的值替换进strtolower(“\\\\1”) 也就相当于是 也就是说我们需要传入一个正则表达式，以及一个需要执行的命令，这个正则表达式能够匹配所有的字符 正则表达式：.*又称为贪婪模式，可以匹配到所有的字符 但是url中不能够使用 . 会被php读取成下划线 所以我们可以使用另外一个正则表达式：\\S* 这个正则表达式可以匹配任何非空字符，等价于： 然后我们传入的命令需要调用getFlag函数，执行eval函数： 所以写成${getFlag()}，而eval函数直接执行get传参cmd传入的命令 所以cmd&#x3D;system(‘cat &#x2F;flag’); 但是由于这段代码是在next.php内的，所以我们需要进入next.php并且执行命令 未完待续捏 参考资料： 我的飞书云文档 The mystery of ip "},{"title":"AuroraCTF Write Up","date":"2022-12-03T13:10:01.000Z","url":"/2022/12/03/AuroraCTF-Write-Up/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["RCE","/tags/RCE/"]],"categories":[["CTF WriteUp","/categories/CTF-WriteUp/"]],"content":"本萌新第二次参加的比赛，毕竟是新生赛，各位师傅都很手下留情了qwq。 我主要做web方向，也做一点简单的Misc和Crypto方向的题，反正就是不看提示和百度基本上做不出来的那种qwq What is CTF(((简单说找flag交上去能拿到分，分越高越好（ 好像说了跟没说一样 其形式有解题赛、攻防赛、混合赛等 大致流程为参赛队伍通过攻防对抗，程序分析等形式获得提供环境的一串flag 将其交给主办方… 嗯，大致又分成五个方向：Web、Reverse、Pwn、Misc、Crypto(logy) 其实可能还有BlockChain( 嗯，大概就这样 Web: 呃呃呃，就是处理用户到网站之间的各种安全事件（ 写后门，内网渗透日穿内网巴拉巴拉（（ Crypto：密码学~ Reverse：逆向工程，破解程序获得源代码，从而写外挂（并不） Pwn：漏洞挖掘提权（来源于俚语：攻破设备或系统 反正本采集完全不会pwn… Misc：顾名思义，即为杂项，包含图片或者音频隐写、wireshark的流量分析、一些密码的破译等等等等，甚至能够在Misc里玩到音游，学会Misc，你就能成为全栈爷（雾） 雾 Websoeasyssti无过滤的ssti jinjia2模板注入，payload： 获得flag Aurora{wu_wu_Just_@_Fl@sk_Test!} 刻猫猫F12打开获得传参点 所以 wifestring(33) “Aurora{GensheN_1s_v3ry_fantastiC}” 原神3.2这里其实是我先用dirsearch扫了一遍发现的www.zip 然后下载下来解压会发现source.js 是一串jsfuck代码，需要使用提供的网站解码（我也不知道为什么，反正我自己找的是解不出来 打开F12，发现secret.php 点进去发现title处就是flag的前半段 组合一下就是 是不是因为没有抽到专武…？ easyrceCTFShow红包题第二弹复刻（雾） get传参，只能使用p和.+&#96;等 嗯，那就差不多了 构造PostPoc 网页处传参 回显fl3g.txt 直接cat即可 AURORA{0h_n1c3!} easyincludeputenv函数将环境从bin更改，调用函数的时候需要添加绝对路径 如 ls –&gt; &#x2F;bin&#x2F;ls die码如下： revengesstissti模板注入，过滤了单引号、下划线 使用ctfshow366的payload： 这里是使用cookie传参 flag&#x3D;Aurora{Request_reQuest_@ll_requesT!!} 关于ssti，本萌新其实真的不懂qwq letmeguess每日一题的靶场做过一次了，所以比较简单 提示是登录的密码是弱密码，所以可以直接用字典爆（ 爆出来的结果就是admin123 然后就可以使用ping了，ping后面可以夹带其他命令，比如ls、cat啥的 这里如果直接使用|ls的话会显示非法语句，说明存在过滤 应该是preg_match型（同样使用%0a绕过 发现 这个kylin应该就藏有flag 输入cat login.php&#x2F;index.php发现被过滤 这里的过滤应该是cat &#x2F; 空格 &#x2F;两者都有 所以干脆直接全换了：空格换成%09、cat换成nl&#x2F;echo&#x2F;tac payload: Tha1nodeshell额，这个是不可见字符成的后门，可以通过visual studio code 看见 可以通过这个字符传递参数，执行命令 打开F12 提示&#x2F;read 和flag在环境变量内 这里的post file其实是使用post方法传递一个file 不是上传文件… 由于是nodejs，所以可以访问app.js 其实这里也能看得到的，逗号后面空了一个 这里漏掉的字符可以进入checkcommands 执行命令 所以可以使用这个字符执行命令，并且写入一个文件中，再读取即可 大概如此，然后读取1.txt即可 another_vn_node啊这个是取巧做的（ 使用CVE-2022-21824进行攻击（ submit之后直接查看&#x2F;flag Aurora{78929acd-3456-4483-b043-c9c5fa1a5a59} babysql喜提-52分，看了提示才知道是无列名注入 omo 提示 使用mysql.innodb_table_stats时，不储存列名，这也是为什么叫无列名注入 使用提示爆出库名、表名 很明显flag表内的内容就是我们需要的内容，接下来我们要读取它的列 无列名注入的大概意思就是 给表里面的列取个名，然后读取它 根据提示的命令得知过滤了空格，回显位置为3 自己测试发现过滤了#、–+ 所以这里使用了单引号闭合 不要问我怎么测出来的，一个劲的搞时间盲注，我是铸币 hard_rcehhh，写过的demo里面提到过确实很难，搞不懂，现在再看应该还是这样的 学习一下即可，die码如下 可以看出过滤了很多函数、同时这个preg_replace处限制了我们只能够使用无参数rce（函数嵌套括号） 这就让我想起了之前做的一个题的payload： 然后一看，var_dump、array、pos、localeconv全被过滤了，寄 但是万幸没有过滤show_source和scandir 可以通过scandir(‘.’)返回的内容使用show_source()显示出来，然后flag应该是在最末尾（这里比较幸运的就是撞对了），可以使用end()读取，所以关键就是构造出那个点（pos(localeconv())就是返回这个点） 而仔细看没有过滤chr 而点又是chr(46)，所以这里只需要构造出46就好了 接下来就是借鉴dalao写的wp里面的内容了 使用burp的intruder模块进行爆破就好了 flag: Aurora{you_are_so_great} Miscxnheulpb百度一下题面xnheulpb 发现其名为小鹤双拼 根据打字的方法打出这几个字即可 绝密信息提示是有标记，所以拖进stegsolve查看 Check in找出这段文字不和谐的地方即可 题外话:想起自己怎么做这个题的时候就笑死了 day 1: 欸为什么这么长一段英文啊，然后仔细看看，On!y是什么鬼 然后想起星期五的英文 我明白了，然后去对照哪里有不同（其实拖进word就知道了 然后我就很傻的一直用原来的英文输入flag day 2：躺床上继续想，欸，是不是提交改了之后的英文？ 立刻爬起来 一看 所有错误的英文单词能够组成welcome! 那没事了 PING打开Wireshark查看ping的内容即可 会发现每次ping的最后总会返回一个字符 而露出破绽的地方就在{，是flag的格式（ 所以打开查看每一个ping的数据就能找到flag了 图片太多了qwq，懒得保存了 组合一下就是 Aurora{Wh4t_1s_PING?} Location推荐使用 exif在线查看一把梭 EXIF信息查看器 然后配合 经纬度格式转换工具软件使用 StrongManHint: Faster; Higher; Stronger. Come and see him in all his glory. Higher处加粗、附件是三张图片，应该是提示修改图片高度 使用010Editor修改即可 修改宽高后即可看到flag： （第一张图是Aurora{W） WebShell既然是webshell，那么hacker肯定需要通过eval函数post一些东西执行命令 然后会回显结果 所以我们直接查查执行的命令以及回显的结果 也就是 http contains c 发现回显的内容是一串base64，解码即可 Barcode条形码解密，附件是缺失定位码的QRCode、Maxicode、dotcode、pdf417 直接修补定位码、然后全部丢进去Dynamsoft Barcode Reader 这个也是能直接读取pdf的（ 结束~ WebShell 2同样是webshell，所以搜索http contains c 发现hacker是通过上传webshell进行攻击的，同时发现了一个zip文件，使用wireshark可以进行导出 保存为1.zip，打开发现需要密码 所以我们还需要在流量内找压缩包的密码 由于hacker是上传的webshell到服务器内，所以我们需要关注他post的内容是啥 这是很明显的蚁剑流量特征（详见看看蚁剑流量包） 解码出来同样也是蚁剑享有的@ini_set头 所以hacker应该是上传了一个webshell到服务器，然后使用蚁剑连接执行的操作 所以我们对其传参的值需要从第三位开始进行base64 decode（也就是删除前两个字符进行解码） 所以我们一个个找POST请求，并且对传参的值进行解码即可 最后在分组202处找到压缩包的密码：CrazyKFCvivo50 然后解压缩即可 Aurora{Antsword_1s_n0thing_mor3_7han_that} Cryptolatex喵 latex的每个符号都是由 \\一串英文 构成的 找出构成的符号的英文，取其首字母即可 所以 flag{catflaG} boxlin’s calculator嗯，真就直接nc 然后算50个简单的加法就好了（雾 记得准备好计算器 easy_hash DoubleFermat费马分解（ 其实可以偷偷去用yafu或者factordb分解大数 可以将n分解成p、q、r、s 那么phi&#x3D; (p-1)(q-1)(r-1)(s-1) 然后就是跑脚本 嗯，连带看提示+百度搜索会做的就这么多了，果然我还是太菜了Orz 题目质量很好，明年再来~"},{"title":"简单看看无数字字母RCE","date":"2022-11-19T04:54:29.000Z","url":"/2022/11/19/%E7%AE%80%E5%8D%95%E7%9C%8B%E7%9C%8B%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DRCE/","tags":[["RCE","/tags/RCE/"]],"categories":[["CTF Web","/categories/CTF-Web/"]],"content":"这两天一直在看的玩意，原来我已经菜到啥也不会了，qwq。 简单引入命令执行： 跑一个过滤字符的php看看能用啥字符 把数字和字母都过滤了，但是大多数符号是能够使用的，所以来看看这个要怎么绕过捏 1.url取反绕过（PHP7）在PHP7中能够直接进行url取反绕过 结果如下 如果是PHP5的话需要多几步 2.汉字取反Orz，这个多少带点离谱，通过对汉字取反得到想要的英文字符 参考大佬给出的生成器（雾），可以通过汉字跑出想要的英文字符 只需要修改$shell&#x3D;’’即可，例如assert就可以通过“极区区皮十勺”得到，POST可以通过“寸小欠立”得到 注意：assert在PHP7.0.12以上版本中已经不能够执行命令了（assert()内如果是字符串会当作php代码执行） 取反：~($var1{1}); 所以我们需要用符号构造出1，这里可以使用$_++；使得变量的值变为1（i++） 这就是执行的结果 3.异或异或运算：比方5^Z 5的ASCII码是53，转成二进制是00110101，Z的ASCII码是90，转成二进制是01011010，二者异或会得到 01101111，转成字符串就是o 所以我们可以通过这个特性构造出我们想要的字符 接下来就是上大佬的脚本时间了： 所以assert可以通过 得到，注意反斜杠转义需要多加一个\\，即 _POST: 所以可以构造： 同样需要进行url编码 执行成功： 4.自增运行一下，看看会得出什么？ 很神奇吧，会拼凑出A、B 解释一下：在Dest0g3-520迎新赛中有解释过 . 能够拼接变量，数组拼接字符串会显示Array（第一步） 第二步，截取A A++ &#x3D;&gt; B; B++&#x3D;&gt;C…以此类推，可以得到A-Z所有字符，然后不断通过拼接，总能得到： 这里直接上一个题好了（ctfshow的） 同样的过滤了一堆符号，并且不能使用数字，英文字母（ 其实跑一下脚本看看能用什么更加直观： 基本上能用的只有符号，不过没有限制下划线，加号，中括号小括号和$ 然后提示是吃瓜杯的shellme，去看一下，wp是自增构造的 但是这题不能够用任何数字（虽然没多大影响） 只需要构造出A，就能够造出_GET，那就能够传参 只需要传参执行命令即可： 总体payload： 5.Post执行通过Post一个文件使用#!&#x2F;bin&#x2F;sh命令并用.（点）执行这个文件，就可以执行命令 例如 同样经过测试 能用的字符只有： 只能通过一个字母p，但是没有过滤点号和反引号，所以可以使用Post传文件并且通过.执行sh命令 （文件上传后储存的位置在&#x2F;tmp&#x2F;php+6个随机字母） 借助一下： burp抓包然后修改一下就可，能够找到&#x2F;flag.txt，直接cat &#x2F;flag.txt 有时候也可以直接.+&#x2F;???&#x2F;????????[@-[]执行，例如ctfshow web入门 55 (只要大小于号、反引号没被过滤基本上能用上面的payload) 而且这个好像只能适用于get传参执行的样子… （注：使用echo+反引号能够执行命令，?&gt;&lt;?&#x3D;&#96;&#96;也相当于echo+反引号） 最后附上过滤字符的php，根据题目的不同修改preg_match就好了（ 芜湖，结束了，摆烂摆烂，反正到时候也是啥都不会~ 参考资料： 无字母数字webshell总结 无字母数字webshell之提高篇 | 离别歌 (leavesongs.com) 无字母数字的命令执行(ctfshow web 入门 55) "},{"title":"Dest0g3 520 迎新赛部分write up","date":"2022-11-13T06:42:49.000Z","url":"/2022/11/13/Dest0g3-520-%E8%BF%8E%E6%96%B0%E8%B5%9B%E9%83%A8%E5%88%86write-up/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"],["RCE","/tags/RCE/"],["Upload","/tags/Upload/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"你管这叫迎新赛… 猛新啊，那没事了。 只有自己不会做的世界达成了 Misc的话… 之后再看看 phpdestrequire_once绕过 require_once()：引用或者包含外部的一个php文件，但是如果已经包含过一次了，该文件不会再次被包含 源码如下： 可以看见flag.php已经被包含了一次了，所以我们要进行require_once的绕过 参考这篇文章的payload： php源码分析 require_once 绕过不能重复包含文件的限制 | CN-SEC 中文网 进行base64解码后就能获得flag 成功获得flag EasyPHP提示：Post something 认识set_error_handler() 源码如下： 上面那个if的条件肯定是实现不了的，哪里有大于24小时或者31天或者60秒的时候啊 所以关键就是在set_error_handler()上了 这个函数是，当报错时，就会执行 也就是我们要POST传参让其报错（ 又因为$fl4g 和 $dest0g3之间有个. 代表拼接 （例如fl4g&#x3D;a dest0g3&#x3D;b 之后的结果就是ab） 但是php中，数组和字符串是不能拼接的，会报错 所以我们传入数组 就会报错，执行set_error_hanlder 打印fl4g SimpleRCE学到了新姿势… Try Try hex2bin 源码如下： 我的妈，那叫一个地狱绘图 ban掉了: ^ 、.、&#96;、大于号、小于号、等于号、双引号、正则preg、&amp;、|、%0、{}、$、+、\\ 然后ban掉了常用的eval执行的命令 但是，唯独少了个单引号 参考了dalao的wp，发现一个神奇的函数：hex2bin() hex2bin()：转换十六进制字符为二进制ASCII字符串 用法：hex2bin(‘hexcode’) 例：echo hex2bin(&#39;68656c6c6f20776f726c64&#39;); &#x2F;&#x2F;输出Hello World 所以没有过滤单引号给我们使用了hex2bin的机会 只需要构造出system(‘cat &#x2F;flag’)就结束了 system –&gt; 73797374656d cat &#x2F;flag –&gt; 636174202f666c6167 也就是构造 aaa=hex2bin(&#39;73797374656d&#39;)(hex2bin(&#39;636174202f666c6167&#39;)); 成功获取flag funny_upload.htaccess的新姿势 文件上传的新姿势 打开F12可以看到如下脚本： 对后缀做了要求，我第一次做的时候直接传.htaccess和图片🐎蚁剑是连不上的&#x3D; &#x3D; 看看wp，要用php包含的方式连蚁剑，我也不知道为什么，挺神奇的 我们的.htaccess参数有： .htaccess中使用auto_prepend_file与auto_append_file能在所有页面的顶部和底部require文件 php_value auto_prepend_file 在页面顶部加载文件 php_value auto_append_file 在页面底部加载文件 所以我们传入的.htaccess文件内容如下： 然后传个1.txt 蚁剑连接，找到flag Really Easy SQL延时盲注（过滤sleep()，substr()） 输入啥都没反应，由于又是SQL注入，很容易想到延时盲注 提示是insert注入 所以payload的格式有：0&#39; or payload or&#39; 采用NewStarCTF的延时盲注脚本就可以了 但是这里直接使用会发现啥也没有，那肯定是过滤了字段 找了找writeup： 发现给了黑名单 过滤sleep和substr 所以我们的payload修改下，mid能够替换substr，benchmark能替换sleep benchmark：让数据库反复多次做一件事，增大延迟（比如执行2500000次的MD5加密） 这个benchmark的误差真的太大了，注意使用时按照延迟修改下keep>的参数 尤其是跑table和column的时候，那个误差，会输出全是~ 同样使用二分脚本即可，payload编写方式与NewStarCTF 的延时盲注一致 同样的，睡一觉起来就能拿到flag了 先去睡会吧~ 不通顺的地方我也没办法，benchmark真的就是误差太大了，我这边使用3000000次和1.8能跑出flag EasySQL和上一题是一样的，但是过滤了大小于号… 那么我们就不能够用二分跑了，只能一个个遍历，我靠 用二分能够稍微提速，遍历那就是坐牢中的坐牢了（我手机点完外卖了都没跑完一个） 同样写脚本，只需要注意什么时候中断循环就行了 同样使用3000000次和1.8的keep，跑出来的结果是最精确的 当然也可以试试(32,127)，正向跑，不知道正向跑和反向跑哪个快点呢&#x3D; &#x3D; 这是真的慢啊啊啊啊啊 跑了大概17、8分钟后，终于跑完了 会看wp然后会做的就这点了，剩下的啥都不会做，寄寄寄 参考资料： .htaccess文件解析漏洞 Dest0g3 520迎新赛 web部分 wp PHP字符串函数hex2bin require_once 绕过 还是开摆吧，呜呜 Orz"},{"title":"看看蚁剑流量包","date":"2022-11-10T15:37:24.000Z","url":"/2022/11/10/%E7%9C%8B%E7%9C%8B%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E5%8C%85/","tags":[["POST","/tags/POST/"],["Misc","/tags/Misc/"]],"categories":[["CTF Misc","/categories/CTF-Misc/"]],"content":"今天来看看Misc（雾） 只是简单的看一下蚁剑上传的包被wireshark抓包以后的形式 工具准备Wireshark &#x2F; Burp Suite （抓包工具，如果使用Burp需要在蚁剑设置代理） 中国蚁剑（AntSword） 以及测试靶机（使用校内靶机进行测试） 开始测试 1.使用txt文档写一个简单的一句话木马 &lt;?php @eval($_POST[&quot;a&quot;]);?&gt; 然后修改成1.php 2.随后上传至靶机，使用蚁剑连接。连接成功后打开虚拟终端 3.使用Wireshark监听数据，虚拟终端内输入whoami，将会获得如下图POST包 也可以输入其他命令（比如我输入的是cd &#x2F;var&#x2F;www&#x2F;html&#x2F;） 3.1 如果你使用的是Burp Suite，打开监听，设置蚁剑的代理为127.0.0.1:8080 然后重复3.的步骤 可以将其复制出来，会发现仅有简单的urlencode，使用解码工具就能够得到以下代码： 又长又臭的一段代码 分析源码 开头：朴实无华的post（连接的密码） 存在有以下的特征： 以@ini_set(&quot;display_errors&quot;, &quot;0&quot;); @set_time_limit(0);开头，由于蚁剑是明文传输，所以很容易被发现 后面有base64字符 以及数据包内存在base64加密的分段内容，经过解码后可以看到路径 命令 以及随机数（后面会看见） 使用eval执行 注：旧版蚁剑还有的特征在user-agent处，请求头是antsword xxx，但是在新版的蚁剑中此特征已被移除。UA头已经改为默认ua头了（下图为旧版蚁剑的UA头） 可以看见function占大部分，而且发送指令时，代码和指令是一块发送的（例如发送了其他post的指令） 就像下面的post指令 使用wireshark可以看到传参的值 将传参的值使用base64解码（注意，从第三位开始才能正常解码），解码结果如下 基本上只有简单的加密 Base64加密在编码器中选择base64加密 wireshark抓包后的结果如下 可以看到明显的base64 eval函数 Value: @eval(@base64_decode($_POST[&#39;c540d73cacbdc8&#39;])); 经过base64解密，可以看到如下图所示的结果 可以看得出来，和明文是一样的 chr()加密结果大同小异 同样解码后还是经典的@ini_set(&quot;display_errors&quot;, &quot;0&quot;); RSA加密在蚁剑的编码器管理中生成RSA密钥 传上去的流量包是这样的，毫无规律 大概就是这样了 写的很水，也不会做Orz 参考资料： 菜刀、蚁剑、冰蝎、哥斯拉特征码 蚁剑流量分析 大佬轻喷qwq"},{"title":"Buuoj Hack World 题解","date":"2022-11-09T05:08:46.000Z","url":"/2022/11/09/Buuoj-Hack-World-%E9%A2%98%E8%A7%A3/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"续接上文 打开靶机同样是sql注入，题面已经提示我们flag在flag表的flag列里了 接下来我们只需要查询就好了 检测注入方式输入1’ 回显bool(false) 没有报错信息 使用堆叠注入和联合查询 均回显SQL Injection Checked. 那只能考虑盲注，测试下是否有两种回显方式 使用1^1 和1^0 测试 发现1^1时，回显Error 发现1^0时，回显Hello, glzjin wants a girlfriend. 说明可以使用盲注 直接跑脚本就行了 把昨天的脚本复制一下，post传参名称改为id就好了（题目提示要我们提供id） Payload 但是这里跑是跑不出结果的 问题分析测试语句 1^(ascii(substr((select(group_concat(flag))from(flag)),1,1))&lt;104) (因为flag的第一个字母f的ascii是102) 发现SQL Injection Checked 所以说某些词被检测到了 经测试.. 当输入select(group_concat(flag))时，检测到了SQL注入 修改Payload如果列内只有一个数据，可以不使用group_concat 因为flag列只有一个flag（ 所以脚本payload改为 1^(ascii(substr((select(flag)from(flag)),%d,1))&lt;%d)%(i,mid) 成功拿到flag PS：不要直接copy我的flag，这个题是动态flag"},{"title":"NewStarCTF SQL注入题","date":"2022-11-08T07:24:09.000Z","url":"/2022/11/08/NewStarCTF-SQL%E6%B3%A8%E5%85%A5%E9%A2%98/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"摆烂大师的第一篇Web文章，qwq。检验我摆烂的水平的时间到了 写写NewStarCTF的SQL注入题吧… 五周考了五个注入，考的点都不一样 NewStarCTF Week 1： Word - For - You嗯… 这个题其实并不算sql注入，只是让你熟悉SQL的语句罢了 打开靶机查询语句发现，输入1和输入1’的回显是一致的，根据这个信息能够初步得出考的应该不是SQL注入 SQL万能密码一般查询数据库执行的语句时 select user_id,user_type,email from users where user_id=&#39;用户名&#39; and password=&#39;密码&#39; 由于后台进行数据库查询时没有滤过单引号，当输入admin 和 1’ or’1’&#x3D;’1时，执行的语句为： select user_id,user_type,email from users where user_id=&#39;admin&#39; and password=&#39;1&#39; or&#39;1&#39;=&#39;1&#39; 这样子看的话，SQL查询语句被分成了两段： 第一段：select user_id,user_type,email from users where user_id=&#39;admin&#39; and password=&#39;1&#39; （由于sql语句中逻辑优先度 【&#x3D;】&gt;【and】&gt;【or】） 第二段：&#39;1&#39;=&#39;1&#39; 这两段语句之间的逻辑运算符是or 由于1&#x3D;1恒为真，所以这段SQL语句恒为真，认证成功 payload使用SQL注入万能密码查询 1&#39; or&#39;1&#39;=&#39;1 拿到flag NewStarCTF Week 2： Word - For - You (2 Gen)报错注入 &#x2F; sqlmap一把梭 打开靶机输入1’ 发现报错，存在SQL注入 测试联合注入测试字段输入1&#39; order by 3# 报错 而输入1&#39; order by 2# 回显正常，说明字段数为2 测试回显位输入1&#39; union select 1,2# 只显示查询成功，说明没有回显位 无法使用联合注入查询 使用报错注入报错注入适用条件：页面没有回显位，但是页面会有报错信息，例如输入 1&#39; order by 3#的时候 注入语句：updatexml(1,&#39;~&#39;,3)，当第二个语句包含特殊字符时，数据库会报错，并且会把参数的内容显示在报错中 需要使用concat语句拼接字符串，长串的语句使用group_concat 查询命令： 1&#39; and updatexml(1,concat(&#39;~&#39;,database()),3)# –爆库 爆出库名wfy 1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name) from inforamtion_schema.tables where table_schema=database())),3)# –爆表 1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name) from information_schema.columns where table_name=&#39;wfy_comments&#39;)),3)# –爆列名 爆出的列名为id,text,user,name,display 我们只需要查询text的内容即可 payload1&#39; and updatexml(1,concat(&#39;~&#39;,(select(reverse(group_concat(text))) from wfy_comments)),3)# 要点： 报错注入的查询内容的字符是有限制的，如果内容过多，则无法回显。所以我们这里使用reverse()将flag倒着输出 使用select之前都需要在select前加括号 拿到倒置的flag sqlmap一把梭sqlmap的使用教程可以查看这篇博客文章 &lt;[(9条消息) 工具使用]SqlMap_拈花倾城的博客-CSDN博客_sqlmap联动msf&#x2F;&gt; 我们可以使用burp抓包的方式，抓到包的数据存入txt文本内，并使用sqlmap梭哈 将抓包的数据保存至txt文本内 sqlmap -r 1.txt --dbs sqlmap -r 1.txt -D wfy --dump 爆库内容 NewStarCTF Week 3： multiSQL堆叠注入，sql预处理语句 题目描述：需要我们修改火华老师的成绩，让他通过四级考试 测试联合注入 &#x2F; 报错注入输入1&#39; 1均无回显 输入1&#39; union select 1,2,3,4# 发现被过滤 联合注入失败 由于无报错信息，无法使用报错注入 堆叠注入堆叠注入是将多个sql语句一起执行，使用;间隔的注入方式 输入1&#39;;show databases;# 爆库 输入1&#39;;show tables;# 爆表 输入1&#39;;show columns from score;# 爆列名 修改数据使用update语句修改分数即可 发现被过滤，怀疑过滤update 所以这里需要我们使用sql预处理语句进行拼接，绕过update的过滤 设置sql语句&#x3D;拼接u 和后面的语句 预处理sql_exe 执行sql_exe 点击验证成绩即可，然后就能拿到flag 或者 查看分数 点击验证成绩就能获得flag 彩蛋这里如果修改的分数不一样的话，拿到flag的对话也是不一样的 修改成100分的结果如下 修改成99999分的结果如下 所以这个故事告诉我们不要把分数改的太大（雾） NewStarCTF Week 4： 又一个SQL异或&#x2F;布尔盲注 打开靶机尝试性输入1 和 1’ 果然，寄。没有回显位，没有报错信息。 我们常用的三种注入方式已经无效了，所以我们接下来要考虑盲注 由于输入1 和 1’的回显信息是好耶和啊哦（刚好是两种不同的信息） 我们这里输入0试试 发现输入0和输入1是两种不同的回显，这样我们就可以使用盲注了 异或运算异或的运算有： 1 ^ 1 &#x3D; 0 1 ^ 0 &#x3D; 1 0 ^ 0 &#x3D; 0 0 ^ 1 &#x3D; 1 也就是说，两件事的异或运算中，如果有一真一假，就会输出1 如果两件都是真，则输出0 那么我们就可以通过异或运算构造sql语句查询 1^(length(database())=3) 注：如果过滤空格，则需要通过加括号的方式进行绕过，此题过滤了空格，所以要在length前加括号 如果数据库的名称长度为3，则为真 1^1 &#x3D; 0，传的数据为0，回显为啊哦 如果数据库的名称长度不为3，则传的数据为1，回显为好耶 通过不断更改&#x3D;后面的数字，可以得出数据库的长度 发现&#x3D;3时，返回啊哦，则说明数据库长度为3，并且布尔&#x2F;异或盲注可用~ 接下来就是编写脚本的事情了 编写盲注脚本采用二分法方式编写盲注脚本 啥是二分法方式？emmm，盲注的原理是一个字符的ascii码数值与你的数值作比较，需要一个个进行比较输出 比如爆库的一个查询语句是1^(ascii(substr(database(),1,1))&#x3D;100) 即数据库名称的第一个字符的ascii 与 100 比较，如果是100 即提交0，返回的值是啊哦 而二分法能够缩短这个过程（ 首先，从数组的中间元素开始搜索，如果该元素正好是目标元素，则搜索过程结束，否则执行下一步。 如果目标元素大于&#x2F;小于中间元素，则在数组大于&#x2F;小于中间元素的那一半区域查找，然后重复步骤（1）的操作。 如果某一步数组为空，则表示找不到目标元素。 大致意思是取第一个字符的ascii值和ascii（32，128）中间值，也就是80（刚好是常用的字段）作比较，如果ascii值大于中间值，从（80,132）的中间值比较,重复比较 直至ascii值相等。 结束一个判断的依据根据页面返回的信息不同，在我的情况中，如果返回的是啊哦，说明是1^1型，那么，啊哦就是正确的依据 Python编写这里给出post &#x2F; get请求的两种盲注的脚本（ 其实你只要跑一次就知道为什么要-1了 最后一次输出的值是&lt;120，返回为真，但是我们此时的mid是120，真正的值是&lt;120 get传参也是如此 这里给出buuoj.cn FinalSQL的盲注脚本 我们愉快的跑脚本就完事了 NewStarCTF Week 5： Final Round延时盲注 题面提示：啊呜，好困呜呜（sleep） 进入靶机其实已经不用测什么方式注入了，sleep嘛，延时注入 测试语句： 114514||if(length(database())=3,sleep(0.2),1) 如果数据库名长度为3，休眠两秒再访问（ 肉眼可见的延迟 编写脚本同样使用python脚本，同样也是post请求，同样也是二分法 套异或的就行了，只不过判断的方式有些不同 bool&#x2F;异或 是根据1和0的两种回应来判断的，而time是根据访问的时间来进行访问的 然后就等吧… 啊呜，好困呜呜 睡一觉就把表跑完了，放心吧 记得renew 靶机 睡了一觉，终于跑完了（我忘记开最后那个倒序重整了，所以flag是倒着的） flag{Ju2t_let_me_sleep_f0r_a_while} 结束辣，好题，但是结束了才会做呜呜呜 看我摆烂的结果如何？ 题目来自：buuoj.cn &#x2F;&#x2F;NewStarsCTF 图片来自：截图 侵删qwq"},{"title":"About Me","date":"2022-11-07T14:27:49.000Z","url":"/2022/11/07/Test/","tags":[["Introduce_Myself","/tags/Introduce-Myself/"]],"categories":[["Intro","/categories/Intro/"]],"content":"Err0r233的自我介绍qwq 一个普通的摆烂哥，普通到不能再普通 qwq，梦想是做到一份非常简单的高考数学卷 不开玩笑了，真正的梦想是变得有钱qwq 练习时长两分钟的个人练习生，甚至不能说是练过ctf的呜呜 啥也不会，留着摆烂 哈？没有摆烂的人生哪能叫做好人生啊 博客的内容 偶尔写写题解qwq(x) 摆烂的时候写写东西用的 Thai神的任务罢了 以上三点都是错的 所以我要到什么时候才能有钱啊啊啊啊啊啊啊 Friends提供一下链接和头像就好了（雾） 图片来自：网络&#x2F;鹰角网络叙拉古人cg 侵删qwq"}]